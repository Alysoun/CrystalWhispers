"use strict";(self.webpackChunkcrystal_whispers=self.webpackChunkcrystal_whispers||[]).push([[478],{478:(e,s,t)=>{t.r(s),t.d(s,{TrapRoom:()=>a});var r=t(475);class a extends r.W{constructor(e,s,t,r,a,i,n){super(e,s,t,r,a,i,n),this.roomType="trap",this.trapType=this.generateTrapType(),this.isDisarmed=!1}generateTrapType(){const e=[{name:"Memory Surge",description:"Crackling energy fills the room, threatening to overload your systems...",difficulty:2,effect:e=>this.isDisarmed?"The trap has been disarmed.":(e.health-=Math.floor(.2*e.maxHealth),"The surge damages your systems!"),disarmMethod:"TIMING",fragments:50},{name:"Data Corruption",description:"Corrupted code streams down the walls, attempting to infect your memory...",difficulty:3,effect:e=>this.isDisarmed?"The trap has been disarmed.":(e.memoryFragments=Math.max(0,e.memoryFragments-10),"The corruption consumes some of your fragments!"),disarmMethod:"PATTERN",fragments:75},{name:"Recursive Loop",description:"The room seems to fold in on itself, threatening to trap you in an endless cycle...",difficulty:4,effect:e=>this.isDisarmed?"The trap has been disarmed.":(e.stunned=!0,"You become trapped in the loop!"),disarmMethod:"SEQUENCE",fragments:100}];return e[Math.floor(Math.random()*e.length)]}attemptDisarm(e,s){if(this.isDisarmed)return{success:!1,message:"This trap is already disarmed."};switch(this.trapType.disarmMethod){case"TIMING":const e=Math.random()<.5;return{success:e,message:e?"You successfully interrupt the surge!":"Your timing was off...",fragments:e?this.trapType.fragments:0};case"PATTERN":return{success:s===this.trapType.pattern,message:s===this.trapType.pattern?"The corruption dissipates!":"The pattern was incorrect...",fragments:s===this.trapType.pattern?this.trapType.fragments:0};default:return{success:!1,message:"Unknown disarm method."}}}getDescription(){return[this.trapType.description,this.isDisarmed?"The trap has been successfully disarmed.":"The trap is still active and dangerous!"].join("\n")}}}}]);
//# sourceMappingURL=478.979a85ee.chunk.js.map