{"version":3,"file":"static/js/478.979a85ee.chunk.js","mappings":"8JAEO,MAAMA,UAAiBC,EAAAA,EAC5BC,WAAAA,CAAYC,EAAIC,EAAGC,EAAGC,EAAOC,EAAQC,EAAOC,GAC1CC,MAAMP,EAAIC,EAAGC,EAAGC,EAAOC,EAAQC,EAAOC,GACtCE,KAAKC,SAAW,OAChBD,KAAKE,SAAWF,KAAKG,mBACrBH,KAAKI,YAAa,CACpB,CAEAD,gBAAAA,GACE,MAAME,EAAQ,CACZ,CACEC,KAAM,eACNC,YAAa,2EACbC,WAAY,EACZC,OAASC,GACFV,KAAKI,WAIH,+BAHLM,EAAOC,QAAUC,KAAKC,MAAyB,GAAnBH,EAAOI,WAC5B,mCAIXC,aAAc,SACdC,UAAW,IAEb,CACEV,KAAM,kBACNC,YAAa,6EACbC,WAAY,EACZC,OAASC,GACFV,KAAKI,WAIH,+BAHLM,EAAOO,gBAAkBL,KAAKM,IAAI,EAAGR,EAAOO,gBAAkB,IACvD,mDAIXF,aAAc,UACdC,UAAW,IAEb,CACEV,KAAM,iBACNC,YAAa,sFACbC,WAAY,EACZC,OAASC,GACFV,KAAKI,WAIH,+BAHLM,EAAOS,SAAU,EACV,mCAIXJ,aAAc,WACdC,UAAW,MAIf,OAAOX,EAAMO,KAAKC,MAAMD,KAAKQ,SAAWf,EAAMgB,QAChD,CAEAC,aAAAA,CAAcC,EAAQC,GACpB,GAAIxB,KAAKI,WAAY,MAAO,CAAEqB,SAAS,EAAOC,QAAS,kCAEvD,OAAQ1B,KAAKE,SAASa,cACpB,IAAK,SACH,MAAMU,EAAUb,KAAKQ,SAAW,GAChC,MAAO,CACLK,UACAC,QAASD,EAAU,wCAA0C,yBAC7DT,UAAWS,EAAUzB,KAAKE,SAASc,UAAY,GAGnD,IAAK,UACH,MAAO,CACLS,QAASD,IAAUxB,KAAKE,SAASyB,QACjCD,QAASF,IAAUxB,KAAKE,SAASyB,QAC/B,6BAA+B,+BACjCX,UAAWQ,IAAUxB,KAAKE,SAASyB,QAAU3B,KAAKE,SAASc,UAAY,GAG3E,QACE,MAAO,CAAES,SAAS,EAAOC,QAAS,0BAExC,CAEAE,cAAAA,GACE,MAAO,CACL5B,KAAKE,SAASK,YACdP,KAAKI,WACH,2CACA,2CACFyB,KAAK,KACT,E","sources":["game/rooms/TrapRoom.js"],"sourcesContent":["import { Room } from './Room';\r\n\r\nexport class TrapRoom extends Room {\r\n  constructor(id, x, y, width, height, theme, dungeon) {\r\n    super(id, x, y, width, height, theme, dungeon);\r\n    this.roomType = 'trap';\r\n    this.trapType = this.generateTrapType();\r\n    this.isDisarmed = false;\r\n  }\r\n\r\n  generateTrapType() {\r\n    const traps = [\r\n      {\r\n        name: 'Memory Surge',\r\n        description: 'Crackling energy fills the room, threatening to overload your systems...',\r\n        difficulty: 2,\r\n        effect: (player) => {\r\n          if (!this.isDisarmed) {\r\n            player.health -= Math.floor(player.maxHealth * 0.2);\r\n            return 'The surge damages your systems!';\r\n          }\r\n          return 'The trap has been disarmed.';\r\n        },\r\n        disarmMethod: 'TIMING',\r\n        fragments: 50\r\n      },\r\n      {\r\n        name: 'Data Corruption',\r\n        description: 'Corrupted code streams down the walls, attempting to infect your memory...',\r\n        difficulty: 3,\r\n        effect: (player) => {\r\n          if (!this.isDisarmed) {\r\n            player.memoryFragments = Math.max(0, player.memoryFragments - 10);\r\n            return 'The corruption consumes some of your fragments!';\r\n          }\r\n          return 'The trap has been disarmed.';\r\n        },\r\n        disarmMethod: 'PATTERN',\r\n        fragments: 75\r\n      },\r\n      {\r\n        name: 'Recursive Loop',\r\n        description: 'The room seems to fold in on itself, threatening to trap you in an endless cycle...',\r\n        difficulty: 4,\r\n        effect: (player) => {\r\n          if (!this.isDisarmed) {\r\n            player.stunned = true;\r\n            return 'You become trapped in the loop!';\r\n          }\r\n          return 'The trap has been disarmed.';\r\n        },\r\n        disarmMethod: 'SEQUENCE',\r\n        fragments: 100\r\n      }\r\n    ];\r\n\r\n    return traps[Math.floor(Math.random() * traps.length)];\r\n  }\r\n\r\n  attemptDisarm(method, input) {\r\n    if (this.isDisarmed) return { success: false, message: 'This trap is already disarmed.' };\r\n\r\n    switch (this.trapType.disarmMethod) {\r\n      case 'TIMING':\r\n        const success = Math.random() < 0.5;\r\n        return {\r\n          success,\r\n          message: success ? 'You successfully interrupt the surge!' : 'Your timing was off...',\r\n          fragments: success ? this.trapType.fragments : 0\r\n        };\r\n\r\n      case 'PATTERN':\r\n        return {\r\n          success: input === this.trapType.pattern,\r\n          message: input === this.trapType.pattern ? \r\n            'The corruption dissipates!' : 'The pattern was incorrect...',\r\n          fragments: input === this.trapType.pattern ? this.trapType.fragments : 0\r\n        };\r\n\r\n      default:\r\n        return { success: false, message: 'Unknown disarm method.' };\r\n    }\r\n  }\r\n\r\n  getDescription() {\r\n    return [\r\n      this.trapType.description,\r\n      this.isDisarmed ? \r\n        'The trap has been successfully disarmed.' :\r\n        'The trap is still active and dangerous!'\r\n    ].join('\\n');\r\n  }\r\n} "],"names":["TrapRoom","Room","constructor","id","x","y","width","height","theme","dungeon","super","this","roomType","trapType","generateTrapType","isDisarmed","traps","name","description","difficulty","effect","player","health","Math","floor","maxHealth","disarmMethod","fragments","memoryFragments","max","stunned","random","length","attemptDisarm","method","input","success","message","pattern","getDescription","join"],"sourceRoot":""}